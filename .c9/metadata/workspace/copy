{"filter":false,"title":"copy","tooltip":"/copy","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":261,"column":1},"action":"insert","lines":["#define _XOPEN_SOURCE 500","#include <cs50.h>","#include <stdio.h>","#include <stdlib.h>","#include <unistd.h>","#include <ctype.h>","// board's minimal dimension","#define MIN 3","// board's maximal dimension","#define MAX 9","// board, whereby board[i][j] represents row i and column j","int board[MAX][MAX];","// board's dimension","int d;","int columns=0, rows=0, temp=0;","int mrow=0, mcol=0;","int findRow=0, findCol=0;"," ","// prototypes","void clear(void);","void greet(void);","void init(void);","void draw(void);","bool move(int tile);","bool won(void);","void save(void);","bool borderSpace();","bool findTile(int tile);"," ","int main(int argc, string argv[])","{","    // greet player","    greet();","    // ensure proper usage","    if (argc != 2)","    {","        printf(\"Usage: ./fifteen d\\n\");","        return 1;","    }","    // ensure valid dimensions","    d = atoi(argv[1]);","    if (d < MIN || d > MAX)","    {","        printf(\"Board must be between %i x %i and %i x %i, inclusive.\\n\",","            MIN, MIN, MAX, MAX);","        return 2;","    }","    // initialize the board","    init();","    // accept moves until game is won","    while (true)","    {","        // clear the screen","        clear();","        // draw the current state of the board","        draw();","        // saves the current state of the board (for testing)","        save();","        // check for win","        if (won())","        {","            printf(\"ftw!\\n\");","            break;","        }","        // prompt for move","        printf(\"Tile to move: \");","        int tile = GetInt();","        // move if possible, else report illegality","        if (!move(tile))","        {","            printf(\"\\nIllegal move.\\n\");","            usleep(500000);","        }","        // sleep for animation's sake","        usleep(500000);","    }","    // that's all folks","    return 0;","}","/**"," * Clears screen using ANSI escape sequences."," */","void clear(void)","{","    printf(\"\\033[2J\");","    printf(\"\\033[%d;%dH\", 0, 0);","    //printf(\"hi\");","}","/**"," * Greets player."," */","void greet(void)","{","    clear();","    printf(\"GAME OF FIFTEEN\\n\");","    usleep(2000000);","}","/**"," * Initializes the game's board with tiles numbered 1 through d*d - 1,"," * (i.e., fills board with values but does not actually print them),"," * whereby board[i][j] represents row i and column j."," */","void init(void)","{","  int rows, columns, tileCount;","    tileCount=(d*d)-1;","    for(rows=0; rows<d ; rows++)","      {","          for (columns=0; columns<d; columns++)","            {","                if (tileCount>0)","                 {","                     board[rows][columns]=tileCount;","                     tileCount--;","                 }","            }","      }","   ","    if(((d*d)-1)%2!=0)","      {","          int x=board[d-1][d-2];","          board[d-1][d-2]=board[d-1][d-3];","          board[d-1][d-3]=x;","      }","}","/**"," * Prints the board in its current state."," */","void draw(void)","{","    // TODO","    for (rows=0; rows<d; rows++)","    {","        for (columns=0; columns<d; columns++)","        {","            if (board[rows][columns] <10)","                printf(\" \");","            if(board[rows][columns]!=0)","                printf(\" %d \", board[rows][columns]);","            else","                printf(\" 0 \");","        }","        printf(\"\\n\");","    }","}","/**"," * If tile borders empty space, moves tile and returns true, else"," * returns false."," */","bool move(int tile )","{","     for (rows=0; rows<d; rows++)","        {","                for (columns=0; columns<d; columns++)","                {","                        if(board[rows][columns]==tile)","                        {","                                findRow = rows;","                                findCol = columns;","                        }","                }","        }","         for (rows=0; rows<d; rows++)","        {","                for (columns=0; columns<d; columns++)","                {","                        if(board[rows][columns]==0)","                        {","                                mrow = rows;","                                mcol = columns;","                        }","                }","        }","   if (findCol == mcol)","    {","        if (findRow == mrow+1 || findRow == mrow-1)","        {","        temp = board[mrow][mcol];","        board[mrow][mcol] = board[findRow][findCol];","        board[findRow][findCol] = temp;","        return true;","        }","    }","    if (findRow == mrow)","    {","        if (findCol == mcol+1 || findCol == mcol-1)","        {","        temp = board[mrow][mcol];","        board[mrow][mcol] = board[findRow][findCol];","        board[findRow][findCol] = temp;","        return true;","        }","    }","    return false;","}"," "," ","/**"," * Returns true if game is won (i.e., board is in winning configuration),"," * else false."," */","bool won()","{","    // TODO","    int tileKey=1;","    int count=1;","    for (rows=0; rows<d; rows++)","        for (columns=0; columns<d; columns++)","        {","            if (board[rows][columns]==tileKey && count==tileKey)","            {","            if (tileKey == d*d-1)","            return true;","            tileKey++;","            }","            count++;","        }","return false;","}","/**"," * Saves the current state of the board to disk (for testing)."," */","void save(void)","{","    // log","    const string log = \"log.txt\";","    // delete existing log, if any, before first save","    static bool saved = false;","    if (!saved)","    {","        unlink(log);","        saved = true;","    }","    // open log","    FILE* p = fopen(log, \"a\");","    if (p == NULL)","    {","        return;","    }","    // log board","    fprintf(p, \"{\");","    for (int i = 0; i < d; i++)","    {","        fprintf(p, \"{\");","        for (int j = 0; j < d; j++)","        {","            fprintf(p, \"%i\", board[i][j]);","            if (j < d - 1)","            {","                fprintf(p, \",\");","            }","        }","        fprintf(p, \"}\");","        if (i < d - 1)","        {","            fprintf(p, \",\");","        }","    }","    fprintf(p, \"}\\n\");","    // close log","    fclose(p);","}"],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":15,"column":0},"end":{"row":16,"column":25},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"cc9dc3c6e5db347d39c83a2c2554a257ae1cd73d","timestamp":1457019042000}